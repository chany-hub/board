"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schemaToQueryTree_1 = require("./schemaToQueryTree");
const _ = require("lodash");
const { getQueryFields, getQueryFieldsModes } = schemaToQueryTree_1.default;
/**
 * @example
 *   exports.default('ObjectContainingTwoDeeplyNestedObjects', require('../test/unit/mockData'))
 *   // => { coverageRatio: 1, notCoveredFields: []}
 *   exports.default('DeeplyNestedObjectWithPartialNoFollow', require('../test/unit/mockData'))
 *   // => { coverageRatio: 0.5, notCoveredFields: ["DeeplyNestedObject___NOFollowPart", "DeeplyNestedObject___DeeplyNestedObject___DeepNest", "DeeplyNestedObject___ObjectField___NotSoDeepNest"]}
 */
function coverageCalculator(rootName, schema) {
    const sharedSkipListForGetQueryableFields = [];
    const sharedSkipListForGetAllFields = [];
    let allQuerableFields = [];
    let allAllFields = [];
    _.forIn(schema[rootName].fields, (field) => {
        const queryableFields = getQueryFields(getQueryFieldsModes.QUERYABLE_FIELDS, field, schema, sharedSkipListForGetQueryableFields);
        const allFields = getQueryFields(getQueryFieldsModes.ALL_FIELDS, field, schema, sharedSkipListForGetAllFields);
        allQuerableFields = _.union(allQuerableFields, queryableFields);
        allAllFields = _.union(allAllFields, allFields);
    });
    return {
        coverageRatio: allQuerableFields.length / allAllFields.length,
        notCoveredFields: _.difference(allAllFields, allQuerableFields)
    };
}
exports.default = coverageCalculator;
;
//# sourceMappingURL=coverageCalculator.js.map